# @@ Incorporate into json.testscript.

: basic
:
$* <<EOI >>EOO
{
  "string":  "str",
  "number":  123,
  "boolean": true,
  "null":    null,
  "array":   ["str", 123, false, null],
  "subobj":  {"foo": "bar"}
}
EOI
  1,  1: {
  2,  3:   string
  2, 14:   "str"
  3,  3:   number
  3, 14:   123
  4,  3:   boolean
  4, 14:   <true>
  5,  3:   null
  5, 14:   <null>
  6,  3:   array
  6, 14:   [
  6, 15:     "str"
  6, 22:     123
  6, 27:     <false>
  6, 34:     <null>
  6, 38:   ]
  7,  3:   subobj
  7, 14:   {
  7, 15:     foo
  7, 22:     "bar"
  7, 27:   }
  8,  1: }
EOO

: empty
:
$* 2>>EOE != 0
<stdin>:1:1: error: unexpected end of text
EOE

# Test a bunch of corner cases.
#
: leading-zero
:
$* <'01' 2>>EOE != 0
<stdin>:1:1: error: leading '0' in number
EOE

: wrong-letter
:
$* <'trux' 2>>EOE != 0
<stdin>:1:4: error: expected 'e' instead of byte 'x' in 'true'
EOE

: error-within-value
:
: Checks that, in case of invalid multi-character token, the column number
: points to the errant character instead of the beginning of the token.
:
$* <'12a45' >'  1,  1: 12' 2>>EOE != 0
<stdin>:1:3: error: expected end of text instead of byte 'a'
EOE

: end-of-text
:
{{
  # Note: suppress trailing newline in input.

  : literal
  :
  $* <:'tru' 2>>EOE != 0
  <stdin>:1:3: error: expected 'e' instead of end of text in 'true'
  EOE
}}

: utf-8
:
{{
  : 2-byte
  :
  {{
    : literal
    :
    $* <'"¢"' >'  1,  1: "¢"'

    : escaped
    :
    $* <'"\u00A2"' >'  1,  1: "¢"'
  }}

  : 3-byte
  :
  {{
    : literal
    :
    $* <'"ह"' >'  1,  1: "ह"'

    : escaped
    :
    $* <'"\u0939"' >'  1,  1: "ह"'
  }}

  : 2-and-3-byte
  :
  $* <'"ह\u00A2¢\u0939"' >'  1,  1: "ह¢¢ह"'

  : column-numbers
  :
  : Checks that literal/directly-embedded multi-byte codepoints occupy only a
  : single column and that escaped codepoints occupy as many columns as there
  : are characters in the escape sequence.
  :
  $* <'["ह","¢","\u20AC"]' >>EOO
    1,  1: [
    1,  2:   "ह"
    1,  6:   "¢"
    1, 10:   "€"
    1, 18: ]
  EOO

  : Invalid byte
  :
  $* <'"\u0MA2"' 2>>EOE != 0
  <stdin>:1:5: error: invalid escape Unicode escape byte 'M'
  EOE
}}
