test.options = --json5e

: newline
:
{{
  : object
  :
  $* <<EOI >>EOO
  {
    foo: 1
    fox: 2 //comment
    bar: 3 /*comm
    end*/baz: 4
  }
  EOI
    1,  1: {
    2,  3:   foo
    2,  8:   1
    3,  3:   fox
    3,  8:   2
    4,  3:   bar
    4,  8:   3
    5,  8:   baz
    5, 13:   4
    6,  1: }
  EOO

  : array
  :
  $* <<EOI >>EOO
  [
    1
    2 //comment
    3 /*comm
    end*/4
  ]
  EOI
    1,  1: [
    2,  3:   1
    3,  3:   2
    4,  3:   3
    5,  8:   4
    6,  1: ]
  EOO

  : comma-required
  :
  $* <'{foo:1 bar:2}' >>EOO 2>>EOE !=0
    1,  1: {
    1,  2:   foo
    1,  6:   1
  EOO
  <stdin>:1:8: error: expected '}', newline, or ',' after member value
  EOE

  : comma-required-comment
  :
  $* <'{foo:1/* */bar:2}' >>EOO 2>>EOE !=0
    1,  1: {
    1,  2:   foo
    1,  6:   1
  EOO
  <stdin>:1:12: error: expected '}', newline, or ',' after member value
  EOE
}}

: comment
:
{{
  : basics
  :
  $* <<EOI >>EOO
  # begin object
  #
  {
    # first member
    foo: # this is foo
    # first value
    1    # this is one
    # next comes trailing comma
    , # this is comma
    #bar: 2
    # after last member
  }
  #
  # end object
  EOI
    3,  1: {
    5,  3:   foo
    7,  3:   1
   12,  1: }
  EOO

  : streaming
  :
  $* --streaming <<EOI >>EOO
  1#comment
  2
  #comment
  #comment
  3
  EOI
    1,  1: 1
    2,  1: 2
    5,  1: 3
  EOO

  : streaming-custom
  :
  $* --streaming --separator <<EOI >>EOO
  1#comment
  2
  #comment
  #comment
  3
  EOI
    1,  1: 1
    1,  2: <0x000023>
    2,  1: 2
    3,  0: <0x00000a>
    3,  1: <0x000023>
    4,  1: <0x000023>
    5,  1: 3
    6,  0: <0x00000a>
  EOO
}}

: identifier
:
{{
  : basics
  :
  $* <<EOI >>EOO
  {
    foo-bar: 1,
    foo.bar: 2,
    foo-:3,
    foo.:4,
  }
  EOI
    1,  1: {
    2,  3:   foo-bar
    2, 12:   1
    3,  3:   foo.bar
    3, 12:   2
    4,  3:   foo-
    4,  8:   3
    5,  3:   foo.
    5,  8:   4
    6,  1: }
  EOO

  : leading-dash
  :
  $* <'{-foo:1}' >>EOO 2>>EOE !=0
    1,  1: {
  EOO
  <stdin>:1:2: error: expected member name
  EOE

  : leading-dot
  :
  $* <'{.foo:1}' >>EOO 2>>EOE !=0
    1,  1: {
  EOO
  <stdin>:1:2: error: expected member name
  EOE
}}

: implied
:
{{
  # NOTE: only the first member goes through the implied logic.

  : identifier
  :
  $* <<EOI >>EOO
  foo: 1,
  bar: 2
  EOI
    1,  1: {
    1,  1:   foo
    1,  6:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : identifier-dash
  :
  $* <<EOI >>EOO
  f-o: 1,
  bar: 2
  EOI
    1,  1: {
    1,  1:   f-o
    1,  6:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : identifier-dot
  :
  $* <<EOI >>EOO
  f.o: 1,
  bar: 2
  EOI
    1,  1: {
    1,  1:   f.o
    1,  6:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : string-single
  :
  $* <<EOI >>EOO
  'foo': 1,
  bar: 2
  EOI
    1,  1: {
    1,  1:   foo
    1,  8:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : string-double
  :
  $* <<EOI >>EOO
  "foo": 1,
  bar: 2
  EOI
    1,  1: {
    1,  1:   foo
    1,  8:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : literal
  :
  $* <<EOI >>EOO
  null: 1,
  foo: 2
  EOI
    1,  1: {
    1,  1:   null
    1,  7:   1
    2,  1:   foo
    2,  6:   2
    3,  0: }
  EOO

  : number
  :
  $* <<EOI >>EOO
  Infinity: 1,
  foo: 2
  EOI
    1,  1: {
    1,  1:   Infinity
    1, 11:   1
    2,  1:   foo
    2,  6:   2
    3,  0: }
  EOO

  : trailing-comma
  :
  $* <<EOI >>EOO
  foo: 1,
  EOI
    1,  1: {
    1,  1:   foo
    1,  6:   1
    2,  0: }
  EOO

  : newline-not-comma
  :
  $* <<EOI >>EOO
  foo: 1
  bar: 2
  EOI
    1,  1: {
    1,  1:   foo
    1,  6:   1
    2,  1:   bar
    2,  6:   2
    3,  0: }
  EOO

  : empty
  :
  $* <:'' >>EOO
    1,  1: {
    1,  1: }
  EOO

  : empty-comments
  :
  $* <<EOI >>EOO
  // This feature is enabled by default.
  //
  //foo: true,

  // This feature is disabled by default.
  //
  //bar: false,
  EOI
    1,  1: {
    8,  0: }
  EOO

  : block-comment-after-name
  :
  $* <<EOI >>EOO
  bar/*_value*/: 1
  EOI
    1,  1: {
    1,  1:   bar
    1, 16:   1
    2,  0: }
  EOO

  : line-comment-after-name
  :
  $* <<EOI >>EOO
  bar//_value
  :
  1
  EOI
    1,  1: {
    1,  1:   bar
    3,  1:   1
    4,  0: }
  EOO

  : hash-comment-after-name
  :
  $* <<EOI >>EOO
  bar#_value
  :
  1
  EOI
    1,  1: {
    1,  1:   bar
    3,  1:   1
    4,  0: }
  EOO

  : multi-byte-skip
  :
  # The whitespace in the input is a non-breaking space (U+00A0).
  #
  $* <:"¬†foo: 1" >>EOO
    1,  2: {
    1,  2:   foo
    1,  7:   1
    1,  7: }
  EOO

  : not-implied-string
  :
  $* <<EOI >>EOO
  "foo"
  EOI
    1,  1: "foo"
  EOO

  : not-implied-string-comment
  :
  $* <<EOI >>EOO
  "foo" //comment
  EOI
    1,  1: "foo"
  EOO

  : not-implied-string-comment-eof
  :
  $* <:'"foo" //comment' >>EOO
    1,  1: "foo"
  EOO

  : not-implied-string-comment-dangling
  :
  $* <:'"foo" /*comment*' 2>>EOE !=0
  <stdin>:1:16: error: unexpected end of text before '*/'
  EOE

  : not-implied-name
  :
  $* <<EOI >>EOO
  true
  EOI
    1,  1: <true>
  EOO

  : not-implied-name-comment
  :
  $* <<EOI >>EOO
  true //comment
  EOI
    1,  1: <true>
  EOO

  : not-implied-name-comment-eof
  :
  $* <:'true //comment' >>EOO
    1,  1: <true>
  EOO

  : not-implied-name-comment-dangling
  :
  $* <:'true /*comment*' 2>>EOE !=0
  <stdin>:1:15: error: unexpected end of text before '*/'
  EOE

  : explicit-end
  :
  $* <<EOI >>EOO 2>>EOE !=0
  foo: 1
  }
  EOI
    1,  1: {
    1,  1:   foo
    1,  6:   1
  EOO
  <stdin>:2:1: error: explicit '}' in implied object
  EOE

  : junk-before-comma
  :
  $* <<EOI >>EOO 2>>EOE !=0
  foo: 1 123
  }
  EOI
    1,  1: {
    1,  1:   foo
    1,  6:   1
  EOO
  <stdin>:1:8: error: expected newline or ',' after member value
  EOE

  : diag
  :
  : Test that diagnostics (both messages and positions) issued by the implied
  : object handling logic matches that of plain JSON5 logic.
  :
  # Note: to make sure positions match, run both with and without --json5e.
  #
  {{
    : junk
    :
    $* <:"TRUE" 2>>EOE !=0
    <stdin>:1:1: error: unexpected 'T' in value
    EOE

    : sub
    :
    $* <:"truth" 2>>EOE !=0
    <stdin>:1:4: error: expected 'e' instead of 't' in 'true'
    EOE

    : sup
    :
    $* <:"truest" 2>>EOE !=0
    <stdin>:1:5: error: expected end of text instead of 's'
    EOE

    : unicode
    :
    $* <:"truêÄÄ" 2>>EOE !=0
    <stdin>:1:4: error: unexpected Unicode character 'êÄÄ' outside of string
    EOE

    : nextc
    :
    $* <:"tru " 2>>EOE !=0
    <stdin>:1:4: error: expected 'e' instead of ' ' in 'true'
    EOE

    : nextc-control
    :
    $* <:"tru$\r" 2>>EOE !=0
    <stdin>:1:4: error: expected 'e' instead of carrige return in 'true'
    EOE

    : nextc-multi-byte
    :
    # The whitespace in the input is a non-breaking space (U+00A0).
    #
    $* <:"tru¬†" 2>>EOE !=0
    <stdin>:1:4: error: expected 'e' instead of '¬†' in 'true'
    EOE

    : nextc-eof
    :
    $* <:"tru" 2>>EOE !=0
    <stdin>:1:3: error: expected 'e' instead of end of text in 'true'
    EOE

    : nextc-newline
    :
    $* <:"tru$\n" 2>>EOE !=0
    <stdin>:1:4: error: expected 'e' instead of newline in 'true'
    EOE

    : not-comment
    :
    $* <:"true /comment" 2>>EOE !=0
    <stdin>:1:6: error: expected end of text instead of '/'
    EOE

    : not-comment-eof
    :
    $* <:"true/" 2>>EOE !=0
    <stdin>:1:5: error: expected end of text instead of '/'
    EOE

    : not-value-comment
    :
    $* <:"tue /comment" 2>>EOE !=0
    <stdin>:1:2: error: expected 'r' instead of 'u' in 'true'
    EOE

    : identifier-dash
    :
    $* <:"true-1" 2>>EOE !=0
    <stdin>:1:5: error: expected end of text instead of '-'
    EOE

    : identifier-dot
    :
    $* <:"true.1" 2>>EOE !=0
    <stdin>:1:5: error: expected end of text instead of '.'
    EOE
  }}
}}
