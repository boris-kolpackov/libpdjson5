test.options = --json5

: whitespace
:
{{
  : single-byte
  :
  $* <"$\f$\v 123" >>EOO
    1,  4: 123
  EOO

  # The whitespace in the input is a non-breaking space (U+00A0).
  #
  : multi-byte-diag
  :
  $* <'tru ' 2>>EOE !=0
  <stdin>:1:4: error: expected 'e' instead of ' ' in 'true'
  EOE

  : multi-byte-skip
  :
  $* <:" tra" 2>>EOE !=0
  <stdin>:1:4: error: expected 'u' instead of 'a' in 'true'
  EOE

  : streaming-separation
  :
  $* --streaming <"1 10" >>EOO
    1,  1: 1
    1,  3: 10
  EOO

  : streaming-separation-custom
  :
  $* --streaming --separator <:"1 10" >>EOO
    1,  1: 1
    1,  2: <0x0000a0>
    1,  3: 10
  EOO
}}

: number
:
{{
  : plus
  :
  $* --streaming <<EOI >>EOO
  +0
  +123
  EOI
    1,  1: +0
    2,  1: +123
  EOO

  : plus-alone
  :
  $* <'+ 123' 2>>EOE !=0
  <stdin>:1:2: error: unexpected ' ' in number
  EOE

  : hex
  :
  $* --streaming <<EOI >>EOO
  0x00
  0XdeCAFF
  -0xff
  +0xEE
  EOI
    1,  1: 0x00
    2,  1: 0XdeCAFF
    3,  1: -0xff
    4,  1: +0xEE
  EOO

  : hex-prefix-only
  :
  $* <:'0x' 2>>EOE !=0
  <stdin>:1:2: error: expected hex digit instead of end of text
  EOE

  : hex-bad-digit
  :
  $* <'0xG' 2>>EOE !=0
  <stdin>:1:3: error: expected hex digit instead of 'G'
  EOE

  : infinity
  :
  $* --streaming <<EOI >>EOO
  Infinity
  -Infinity
  +Infinity
  EOI
    1,  1: Infinity
    2,  1: -Infinity
    3,  1: +Infinity
  EOO

  : infinity-bad
  :
  $* <<EOI 2>>EOE !=0
  -Infinty
  EOI
  <stdin>:1:7: error: expected 'i' instead of 't' in 'Infinity'
  EOE

  : nan
  :
  $* --streaming <<EOI >>EOO
  NaN
  -NaN
  +NaN
  EOI
    1,  1: NaN
    2,  1: -NaN
    3,  1: +NaN
  EOO

  : nan-bad
  :
  $* <<EOI 2>>EOE !=0
  -Nan
  EOI
  <stdin>:1:4: error: expected 'N' instead of 'n' in 'NaN'
  EOE

  : leading-dot
  :
  $* --streaming <<EOI >>EOO
  .0
  .123
  .123e-3
  -.0
  -.123
  -.123
  EOI
    1,  1: .0
    2,  1: .123
    3,  1: .123e-3
    4,  1: -.0
    5,  1: -.123
    6,  1: -.123
  EOO

  : trailing-dot
  :
  $* --streaming <<EOI >>EOO
  0.
  123.
  123.e-3
  EOI
    1,  1: 0.
    2,  1: 123.
    3,  1: 123.e-3
  EOO

  : lone-dot
  :
  $* <<EOI 2>>EOE !=0
  .
  EOI
  <stdin>:1:2: error: expected digit instead of newline
  EOE

  : lone-dot-with-sign
  :
  $* <<EOI 2>>EOE !=0
  -.
  EOI
  <stdin>:1:3: error: expected digit instead of newline
  EOE
}}

: escape
:
{{
  : basics
  :
  $* --streaming <<EOI >>"EOO"
  "\n"
  '\''
  "\x5c"
  "a\
  b"
  "\A\C/\D\C"
  EOI
    1,  1: "$\n"
    2,  1: "'"
    3,  1: "\\"
    4,  1: "ab"
    5,  1: "AC/DC"
  EOO

  : pass-control
  :
  $* <"'$\b\\$\b'" >"  1,  1: \"$\b$\b\""

  : crlf-line-continuation
  :
  $* <"'a\\$\r$\nb'" >>EOO
    1,  1: "ab"
  EOO

  : digit
  :
  $* <'"\1"' 2>>EOE !=0
  <stdin>:1:3: error: invalid escape '1'
  EOE

  : digit-after-zero
  :
  $* <'"\01"' 2>>EOE !=0
  <stdin>:1:4: error: invalid escape '1'
  EOE
}}

: single-quoted
:
{{
  : basics
  :
  $* <<EOI >>EOO
  {
    'foo "fox" bar': 'bar "baz" foo'
  }
  EOI
    1,  1: {
    2,  3:   foo "fox" bar
    2, 20:   "bar "baz" foo"
    3,  1: }
  EOO

  : unterminated
  :
  $* <:"'foo\"" 2>>EOE !=0
  <stdin>:1:5: error: unterminated string literal
  EOE
}}

: unquoted
:
{{
  : basics
  :
  $* <<EOI >>EOO
  {
    foo: 1,
    FOO: 2,
    foo1: 3,
    foo_bar_1: 4,
    _: 5,
    _foo: 6,
    _123: 7
  }
  EOI
    1,  1: {
    2,  3:   foo
    2,  8:   1
    3,  3:   FOO
    3,  8:   2
    4,  3:   foo1
    4,  9:   3
    5,  3:   foo_bar_1
    5, 14:   4
    6,  3:   _
    6,  6:   5
    7,  3:   _foo
    7,  9:   6
    8,  3:   _123
    8,  9:   7
    9,  1: }
  EOO

  : invalid
  :
  $* <<EOI >>EOO 2>>EOE !=0
  {
    1foo: 1
  }
  EOI
    1,  1: {
  EOO
  <stdin>:2:3: error: expected member name
  EOE
}}

: comma
:
{{
  : array
  :
  $* <<EOI >>EOO
  [
    1,
    2,
  ]
  EOI
    1,  1: [
    2,  3:   1
    3,  3:   2
    4,  1: ]
  EOO

  : array-empty
  :
  $* <<EOI >>EOO 2>>EOE !=0
  [
    ,
  ]
  EOI
    1,  1: [
  EOO
  <stdin>:2:3: error: unexpected ',' in value
  EOE

  : object
  :
  $* <<EOI >>EOO
  {
    "foo": 1,
    "bar": 2,
  }
  EOI
    1,  1: {
    2,  3:   foo
    2, 10:   1
    3,  3:   bar
    3, 10:   2
    4,  1: }
  EOO

  : object-empty
  :
  $* <<EOI >>EOO 2>>EOE !=0
  {
    ,
  }
  EOI
    1,  1: {
  EOO
  <stdin>:2:3: error: expected member name
  EOE

  : object-after-name
  :
  $* <<EOI >>EOO 2>>EOE !=0
  {
    "foo" ,
  }
  EOI
    1,  1: {
    2,  3:   foo
  EOO
  <stdin>:2:9: error: expected ':' after member name
  EOE
}}

: comment
:
{{
  : block
  :
  $* <<EOI >>EOO
  /*x
    y*/
  /*x*/{/*x*/
    /*x*/
    /*x*/"a"/*x*/:/*x*/123/*x*/,/*x*/
    /*x*/
    /*x*//*x*/"b"/*x*//*x*/:/*x*/  /*x*/"abc"/*x*//*x*/,/*x*//*x*/
    /*x*/
    /*x*/"c"/*x*/:/*x*/ [/*x*/1/*x*/,/*x*/2/*x*/]/*x*/,/*x*/
    /*x*/
    /*x*/"d"/*x*/:/*x*/{/*x*/"x"/*x*/:/*x*/true/*x*/}/*x*/
  /*x*//*x*/
  /*x*/}/*x*/
  /*x*/
  /*x*/
  EOI
    3,  6: {
    5,  8:   a
    5, 22:   123
    7, 13:   b
    7, 39:   "abc"
    9,  8:   c
    9, 23:   [
    9, 29:     1
    9, 41:     2
    9, 47:   ]
   11,  8:   d
   11, 22:   {
   11, 28:     x
   11, 42:     <true>
   11, 51:   }
   13,  6: }
  EOO

  : line
  :
  $* <<EOI >>EOO
  //x
  //x
  {//x
    //x
    "a": 123,//x
    "b": "abc", //x
    "c":  //x
    //x
    [//x
      //x
      1//x
      //x
      ,//x
      2//x
    //x
    ]//x
    //x
    ,//x
    //x
    "d"//x
    //x
    ://x
    //x
    {//x
    "x" : true}//x
  //x
  }//x
  //x
  //x
  EOI
    3,  1: {
    5,  3:   a
    5,  8:   123
    6,  3:   b
    6,  8:   "abc"
    7,  3:   c
    9,  3:   [
   11,  5:     1
   14,  5:     2
   16,  3:   ]
   20,  3:   d
   24,  3:   {
   25,  3:     x
   25,  9:     <true>
   25, 13:   }
   27,  1: }
  EOO

  : mixed
  :
  $* <<EOI >>EOO
  //x
  /*x*/{//x
    /*x*/"a": 123,/*x*///x
    /*x*/"b": "abc", /*x*/ //x
    /*x*/"c": [1, 2],// /*
    /*x*/"d": {"x": true}/*x*/
  //x
  //x
  /*x
    y*/}//x
  //x
  /*x*/
  //x
  EOI
    2,  6: {
    3,  8:   a
    3, 13:   123
    4,  8:   b
    4, 13:   "abc"
    5,  8:   c
    5, 13:   [
    5, 14:     1
    5, 17:     2
    5, 18:   ]
    6,  8:   d
    6, 13:   {
    6, 14:     x
    6, 19:     <true>
    6, 23:   }
   10,  6: }
  EOO

  : streaming
  :
  $* --streaming <<EOI >>EOO
  1/* comment */2
  /*comment*/
  3// comment
  4
  /*comment*///comment
  /*comment*/
  /**/5
  EOI
    1,  1: 1
    1, 15: 2
    3,  1: 3
    4,  1: 4
    7,  5: 5
  EOO

  : streaming-custom
  :
  $* --streaming --separator <<EOI >>EOO
  1/* comment */2
  /*comment*/
  3// comment
  4
  /*comment*///comment
  /*comment*/
  /**/5
  EOI
    1,  1: 1
    1,  2: <0x00002a>
    1, 15: 2
    2,  0: <0x00000a>
    2,  1: <0x00002a>
    3,  0: <0x00000a>
    3,  1: 3
    3,  2: <0x00002f>
    4,  1: 4
    5,  0: <0x00000a>
    5,  1: <0x00002a>
    5, 12: <0x00002f>
    6,  1: <0x00002a>
    7,  0: <0x00000a>
    7,  1: <0x00002a>
    7,  5: 5
    8,  0: <0x00000a>
  EOO

  : block-only
  :
  $* <<EOI 2>>EOE !=0
  /*
   * bad
   */
  EOI
  <stdin>:4:0: error: unexpected end of text
  EOE

  : line-only
  :
  $* <<EOI 2>>EOE !=0
  // bad
  EOI
  <stdin>:2:0: error: unexpected end of text
  EOE

  : line-dangling
  :
  $* <:'2//x' >>EOO
    1,  1: 2
  EOO

  : block-dangling
  :
  $* <<EOI 2>>EOE !=0
  /*/ 2
  EOI
  <stdin>:2:0: error: unexpected end of text before '*/'
  EOE
}}
